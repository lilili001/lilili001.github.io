<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[es6]]></title>
      <url>/2018/01/23/es6/</url>
      <content type="html"><![CDATA[<h1 id="let-const"><a href="#let-const" class="headerlink" title="let , const"></a>let , const</h1><p>let,const :block scope 块级作用域 作用域 {} 内，{}外是无法访问的</p>
<pre><code>if(true){
    let name # &quot;alice&quot;;
}
console.log(name) // nam is not defined
</code></pre><p>name只是作用在{} 内,但是var 对{}而言是直接暴露在外面的,只是在函数内有作用域的概念</p>
<h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><ul>
<li>var 可以在全局中重复声明 这样的结果是会覆盖别人写的变量</li>
<li><p>let 和 const 不能在同一个作用域中重复声明变量</p>
<pre><code>let name # &quot;alice&quot;;
let name # &quot;joe&quot;;
console.log(name); //Identifier &apos;name&apos; has already been declared
</code></pre></li>
</ul>
<pre><code>//不同作用域 虽然变量命一样 但是值不一样 
//以下代码 如果在 console中打印 name的值是 joe,因为是全局的
let name # &quot;joe&quot;;
console.log(name);  //joe
if(true){
   let name # &quot;melody&quot;;
   console.log(name)//melody
}
</code></pre><ul>
<li><p>let 可以重新赋值， 但是const不可以</p>
<pre><code>let name # &quot;alice&quot;;
    name # &quot;sdf&quot;;  //不报错

const age# &quot;AGE&quot;;
     age # &quot;arg&quot;;// 报错 Assignment to constant variable.
</code></pre></li>
<li><p>const 属性可以赋值</p>
<pre><code>const person # {
     name:&apos;alice&apos;,
     age:12
  }

person.age # 13;//可以这样赋值 但是不可以整个person # {}这样赋值, 这样就改变了变量的指针 如果连属性都不让赋值可以这样

const jelley # Object.freeze(person);
</code></pre></li>
</ul>
<h2 id="let-和-const-私有化"><a href="#let-和-const-私有化" class="headerlink" title="let 和 const 私有化"></a>let 和 const 私有化</h2><p>如果直接写全局变量，不管是 var,let,const 都会覆盖 window的全局变量 , 我们可以使用闭包使变量私有化，也可以使用{} 来实现：</p>
<pre><code>(function(){
        let name # &quot;alice&quot;;
        console.log(name)
})();


{
        const name # &quot;joe&quot;;
        console.log(name)// joe
 }
 console.log(name)// &quot;&quot;
</code></pre><p>应用场景：</p>
<pre><code>//应用场景 for循环
for( var i # 0;i&lt;10;i++ ){
    console.log(i);// 0,1,2,.....10
    setTimeout(function(){
        console.log(`i:${i}`)//10
    },1000);
}
console.log(&apos;#########&apos;)

for( let i # 0;i&lt;10;i++ ){
    console.log(i);// 0,1,2,.....10
    setTimeout(function(){
        console.log(`i:${i}`)//0,1,2,.....10
    },1000);
}
</code></pre><h2 id="临时性死区"><a href="#临时性死区" class="headerlink" title="临时性死区"></a>临时性死区</h2><p>var 中的变量提升：</p>
<pre><code>console.log(color);//undefined
     var color # &quot;yellow&quot;;

//这个结果实际是 

var color;
console.log(&apos;color&apos;);
color#&quot;yellow&quot;;
</code></pre><p>let 不是, 在变量未声明之前 变量处于暂时死区的状态</p>
<pre><code>console.log(color);//uncaught ReferenceError: color is not defined
     let color # &quot;yellow&quot;;
</code></pre><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><pre><code>const numbers # [1,2,3,4,5,6];
const  double # numbers.map(function (number) {
    return number*2;
});

const double2 # numbers.map( (number,i) #&gt;{
    return `${i}:${number*2}`;
});
</code></pre><p>箭头符号 如果只有一个参数 () 可省略，如果有多个参数则必须要写（）</p>
<h2 id="隐式返回"><a href="#隐式返回" class="headerlink" title="隐式返回"></a>隐式返回</h2><pre><code>const double3 # numbers.map( (number,i) #&gt; `${i}:${number*2}`);
</code></pre><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><pre><code>const greet # name #&gt; {alert(`hello ${name}`)};
   greet(&apos;jelley&apos;);
</code></pre><h2 id="箭头函数-this"><a href="#箭头函数-this" class="headerlink" title="箭头函数 this"></a>箭头函数 this</h2><pre><code>const Alice # {
        name:&apos;Alice&apos;,
        hobbies:[&apos;Coding&apos;,&apos;Sleeping&apos;,&apos;Reading&apos;],
        printHobbies:function(){
            this.hobbies.map( hobby#&gt;{
                console.log( `${this.name} loves ${hobby}` );
            });
        }
    };
  Alice.printHobbies();
</code></pre><h2 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h2><pre><code>function multiply(a,b){
         a # a || 5;
         b # b || 3;
         return a*b;
     }

//es6 函数默认值
function multiply(a#2,b#4){
     return a*b;
    }

multiply(undefined,5);
</code></pre><h2 id="不适用的场景"><a href="#不适用的场景" class="headerlink" title="不适用的场景"></a>不适用的场景</h2><pre><code>－ 构造函数
－ 当真正需要用this的时候
</code></pre><h1 id="字符串模版"><a href="#字符串模版" class="headerlink" title="字符串模版"></a>字符串模版</h1><pre><code>const name = &quot;alice&quot;;
const age = 5;
const str = `My name is ${name} My age is ${age*5};`
</code></pre><p>  字符串模版可以用｀｀嵌套, 也可以使用表达式</p>
<pre><code>const jelley = {
     name:&apos;Jelley&apos;,
     date:&apos;2018-01-23&apos;,
     todos:[
         {name:&apos;Go to school&apos;,completed:false},
         {name:&apos;Watch Moving&apos;,completed:true},
         {name:&apos;Running&apos;,completed:true},
     ]
 };
 function renderTodos(todo) {
     return `
     &lt;ul&gt;
         ${jelley.todos.map( todo=&gt; `&lt;li&gt;
             ${todo.name} ${todo.completed ? &quot;✅&quot;: &quot;❎&quot;}
             &lt;/li&gt;` ).join(&quot;&quot;)}
     &lt;/ul&gt;
         `;
 }
 const template = `
     &lt;nav class=&quot;panel&quot;&gt;
       &lt;p class=&quot;panel-heading&quot;&gt;
         ${jelley.name}
       &lt;/p&gt;
       &lt;p class=&quot;panel-blocks&quot;&gt;
          ${renderTodos(jelley)}
       &lt;/p&gt;
     &lt;/nav&gt;
 `;

 document.body.innerHTML = template;
</code></pre><h2 id="模版标签"><a href="#模版标签" class="headerlink" title="模版标签"></a>模版标签</h2><pre><code>const name = &apos;alice&apos;;
const age = 15;
// ... 为剩余参数 等价于 arg2,arg3 ......
function hightLight(strings,...values){
    //注意 如果hightLight是以变量作为开头或结尾的话 strings 就有三个项  头尾为 &quot;&quot;  可对比template 和 template1
   //debugger;//查看console 中的 scope &gt; locale

    //values :[name,age]

    //hilighted 结果是一个数组 [&quot;&lt;span class=&quot;hightlight&quot;&gt;alice&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;hightlight&quot;&gt;15&lt;/span&gt;&quot;]
    const hilighted = values.map(value=&gt;`&lt;span class=&quot;hightlight&quot;&gt;${value}&lt;/span&gt;`);
    let str = &quot;&quot;;
    //strings [&quot;&quot; , &quot;has become to age of&quot; ,&quot;&quot;]


    //字符串累加方法一：
    /*
    strings.forEach(function (string,i) {
        // &quot;&quot; alice
        // has Become to age of 15
        // &quot;&quot; undefined
        str+=`${string}${hilighted[i] || &apos;&apos; }`
    });
    return str;
    */

    //字符串累加方法二： 还可以用arr.reduce方法 不用foreach
   return strings.reduce((prev,curr,i)=&gt;  `${prev}${curr}${hilighted[i]|| &apos;&apos;}`,&apos;&apos;);

}
//这一句其实是 hightLight函数的调用 有三个参数 string name age
const template = hightLight`Jelley ${name} has become to age of ${age}`;
document.body.innerHTML = template;
//const template1 = hightLight`Alice ${name} has become to age of ${age}.`;
</code></pre><p>参数：</p>
<p><img src="/images/posts/WX20180124-101926@2x.png" alt="test-w100"> </p>
<p>结果如下：</p>
<p> <img src="/images/posts/WX20180124-101038@2x.png" alt="结果">   </p>
<h2 id="模板字符串转义"><a href="#模板字符串转义" class="headerlink" title="模板字符串转义"></a>模板字符串转义</h2><p>限制非法字符,防止xss攻击 像在图片中插入 onload 事件等等</p>
<p>cdn:cdnjs.com<br>purify.min.js 使用方法：DOMPurify.sanitize(string);</p>
<pre><code>const form = document.querySelector(&apos;.add-comment&apos;);
const textarea = document.querySelector(&apos;.comment-text&apos;);
const comment = document.querySelector(&apos;.comment&apos;);

function sanitize(strings,...values){
   const dirty = strings.reduce((prev,curr,i) =&gt; `${prev}${curr} ${values[i] || &apos;&apos; } ` , &apos;&apos;);
   return DOMPurify.sanitize(dirty);
}

form.addEventListener(&apos;submit&apos;,function(event){
    event.preventDefault();
    comment.innerHTML =sanitize
        `
        &lt;div class=&quot;header-inner&quot;&gt;Mary&lt;/div&gt;
        &lt;div class=&quot;header-body&quot;&gt;${textarea.value}&lt;/div&gt;
        `;
});
</code></pre><h2 id="模版函数"><a href="#模版函数" class="headerlink" title="模版函数"></a>模版函数</h2><p>note:大小写敏感</p>
<p>string.startWith(string,index) //index string开始的位置<br>string.endWith(string,index) //indes string末位的位置<br>string.includes()<br>string.repeat()</p>
<pre><code>const id = &quot;422126198012042523x&quot;;
 const fan = &quot;I love fx&quot;;

 id.startsWith(&apos;422&apos;);//true
 id.startsWith(&apos;1980&apos;,6)//true 第二个参数为 从第6位开始的是不是1980

 fan.startsWith(&apos;I&apos;);//true
 fan.startsWith(&apos;i&apos;);//false

 fan.endsWith(&apos;love&apos;,6);// 第二个参数index: love 在 fan中最后一位

 &apos;ha&apos;.repeat(5);//hahahahaha
const heading =    `${ &apos;=&apos;.repeat(5) } ${fan} ${ &apos;=&apos;.repeat(5) } `;//&quot;===== I love fx ===== &quot;
</code></pre><h1 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h1><p>使用es6的方法将对象的属性解构出来,就不用每次都 const name = Tom.name这样来获取</p>
<pre><code>const Tom = {
    name:&quot;Tom Jones&quot;,
    age:12,
    family:{
        mother:&quot;Kate Jones&quot;,
        father:&quot;Richard Jones&quot;,
        brother:&quot;Howard Jones&quot;
    }
};
const {name,age} = Tom;
console.log(name);//Tom Jones
console.log(age);//12

//如果想提前声明name 可这样
let name = &quot;&quot;;
({name,age} = Tom);

//变量重命名 和 默认值
const father = &quot;Dad&quot;;
const{ father:f,mother,brother , sister=&apos;no sister as default value&apos; } = Tom.family;// 将变量father 重命名为 f
console.log(f,mother,brother);


//eg
function appendChildDiv(options={}){
    const {width=&apos;100px&apos;,height=&apos;100px&apos;,background=&apos;red&apos;,parent=&apos;body&apos;} = options;
    const div = document.createElement(&apos;div&apos;);
    div.style.width = width;
    div.style.height = height;
    div.style.backgroundColor = background;
    document.querySelector(parent).appendChild(div);
}
appendChildDiv({
    width:&apos;200px&apos;
})
</code></pre><h1 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h1><pre><code>const arr = [&apos;one&apos;,&apos;two&apos;,&apos;three&apos;];
const [one,two,three,category=&apos;php&apos;] = arr; //默认值必须是当变量为undefined的时候才有用

console.log(one,two);

//如果想要 three
const [one,,three] = arr;

//注意 rest参数必须为数组的最后一项
const [one,...others] = arr;
console.log(one, others );//one (2) [&quot;two&quot;, &quot;three&quot;]

//交换变量 
let a=1,b=2;
const [a,b] = [b,a];
</code></pre><h1 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h1><pre><code>for (let fruit of arr){
    if(fruit == &apos;pear&apos;) continue;
    console.log(fruit);
}
</code></pre>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> es6 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/01/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> a </tag>
            
            <tag> b </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
