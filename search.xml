<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[npm]]></title>
      <url>/2018/01/24/npm/</url>
      <content type="html"><![CDATA[<ul>
<li>卸载包 <code>npm uninstall -g webpack-server-dev</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> npm </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack初探]]></title>
      <url>/2018/01/24/webpack/</url>
      <content type="html"><![CDATA[<h1 id="webpack-初探"><a href="#webpack-初探" class="headerlink" title="webpack 初探"></a>webpack 初探</h1><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><pre><code> $ npm init
$ npm install -S webpack 
$ npm install -g webpack
$ touch webpack.config.js
</code></pre><h3 id="webpack-config-js-配置"><a href="#webpack-config-js-配置" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debug = process.env.NODE_ENV !== <span class="string">"production"</span>;</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    context: __dirname,<span class="comment">//项目的绝对路径 下面的配置以这个为基础</span></span><br><span class="line">    devtool: debug ? <span class="string">"inline-sourcemap"</span> : <span class="literal">false</span>,</span><br><span class="line">    entry: <span class="string">"./js/script.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/js"</span>,</span><br><span class="line">        filename: <span class="string">"script.min.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: debug ? [] : [</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.DedupePlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123; <span class="attr">mangle</span>: <span class="literal">false</span>, <span class="attr">sourcemap</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="文件-js-script-js-引用-src-module1-js-src-module2-js"><a href="#文件-js-script-js-引用-src-module1-js-src-module2-js" class="headerlink" title="文件 js/script.js 引用 src/module1.js  src/module2.js"></a>文件 js/script.js 引用 src/module1.js  src/module2.js</h3><p>script.js<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">require</span>(<span class="params">'../src/module1.js'</span>)</span>;</span><br><span class="line"><span class="function"><span class="title">require</span>(<span class="params">'../src/module2.js'</span>)</span>;</span><br></pre></td></tr></table></figure></p>
<p>module1.js<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>('module1')</span><br></pre></td></tr></table></figure></p>
<p>module2.js<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>('module2')</span><br></pre></td></tr></table></figure></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>开发环境<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> webpack</span></span><br></pre></td></tr></table></figure></p>
<p>生产<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> NODE_ENV = production webpack</span></span><br></pre></td></tr></table></figure></p>
<h1 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h1><p>让项目以http方式在浏览器运行</p>
<pre><code>$ npm install -S webpack-dev-server

//设置运行目录 以及端口
$ webpack-dev-server --content-base src --port=3000
</code></pre><p>此时就可以在浏览器访问　localhost:3000 </p>
<p>实时update:</p>
<ul>
<li><p>通过浏览器url</p>
<pre><code>http://localhost:3000/webpack-dev-server/index.html
</code></pre></li>
<li><p>通过 –inline –hot</p>
<pre><code>$ webpack-dev-server --content-base src --port=3000 --inline --hot     
</code></pre></li>
<li>通过 npm run dev</li>
</ul>
<p>将这句命令 <code>$ webpack-dev-server --content-base src --port=3000 --inline --hot</code><br>拷到package.json中就可以直接用 <code>npm run dev</code>来实现及时热加载了</p>
<p>前提是全局安装了　wepack-dev-server <code>$ npm install -g webpack-dev-server</code><br>但是我们可以不用全局安装 可以直接使用node_modules中的来实现</p>
<p>package.json:<br><code>&quot;dev&quot;:&quot;./node_modules/.bin/webpack-dev-server --content-base src --port=3000 --inline --hot&quot;</code></p>
<h1 id="有用的命令"><a href="#有用的命令" class="headerlink" title="有用的命令"></a>有用的命令</h1><pre><code>$ webpack --watch
</code></pre>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> Js </category>
            
            <category> webpack </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[React]]></title>
      <url>/2018/01/24/react/</url>
      <content type="html"><![CDATA[<h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><pre><code>import React from &quot;react&quot;;
import ReactDom from &quot;react-dom&quot;;
class Layout extends React.Component{
    render(){
         return (
                  &lt;h1&gt;sdfsdf时尚&lt;/h1&gt;
             );

    }
}

const app = document.getElementById(&apos;app&apos;);
ReactDom.render(&lt;Layout/&gt;,app);
</code></pre><ul>
<li><p>jsx 元素必须有一个包裹，如果这样就报错</p>
<pre><code>render(){
     return (
              &lt;h1&gt;sdfsdf时尚&lt;/h1&gt;
              &lt;h1&gt;sdfsdf时尚&lt;/h1&gt;
         );

}
</code></pre></li>
<li><p>变量的使用</p>
<pre><code>render(){
    const name = &quot;alice&quot;;
     return (
              &lt;h1&gt;{name} sdfsdf时尚aaabbb&lt;/h1&gt;
         );

}

 //表达式
 return (
      &lt;h1&gt;{4*4} sdfsdf时尚aaabbb&lt;/h1&gt;
 );

//使用函数
return (
      &lt;h1&gt;{(function(){return 3;})()} sdfsdf时尚aaabbb&lt;/h1&gt;
 );    

 //方法
 class Layout extends React.Component{
    getVal(){
        return &apos;will&apos;;
    }
    render(){
         return (
                  &lt;h1&gt;{this.getVal()} sdfsdf时尚aaabbb&lt;/h1&gt;
             );

    }
}
//constructor方法 放各种变量
constructor(){
    super();
    this.name = &apos;will&apos;;
}
render(){
     return (
              &lt;h1&gt;{this.name} sdfsdf时尚aaabbb&lt;/h1&gt;
         );

}    
</code></pre></li>
<li><p>文件组件模块化</p>
<p>  client.js</p>
<pre><code>import React from &quot;react&quot;;
import ReactDom from &quot;react-dom&quot;;
import Layout from &apos;./components/Layout&apos;;
const app = document.getElementById(&apos;app&apos;);
ReactDom.render(&lt;Layout/&gt;,app);
</code></pre><p>  components/Layout.js</p>
<pre><code>import React from &quot;react&quot;;
export default class Layout extends React.Component{
    constructor(){
        super();
        this.name = &apos;will&apos;;
    }
    render(){
         return (
                  &lt;h1&gt;{this.name} sdfsdf时尚aaabbb&lt;/h1&gt;
             );

    }
}
</code></pre></li>
<li><p>state使用 状态自动更新</p>
<pre><code>constructor(){
    super();
    this.state = {name:&apos;alice&apos;};
}  
render(){
    setTimeout(()=&gt;{this.setState({name:&apos;bob&apos;})},1000);
     return (
              &lt;div&gt;
                  {this.state.name}
                  &lt;Header/&gt;
                  &lt;Footer/&gt;
              &lt;/div&gt;
         );

}    
</code></pre></li>
<li><p>props</p>
<p>  父组件 Header</p>
<pre><code>render(){
    const title=&quot;Welcome Will&quot;;
     return (
               &lt;Title title={title}/&gt;
         );

}
</code></pre><p>  子组件 Title</p>
<pre><code>render(){
     return (
              &lt;h1&gt;{this.props.title}&lt;/h1&gt;
         );

}    
</code></pre><p>  state 结合 props</p>
<pre><code>//父组件 Header
constructor(){
    super();
    this.state={title:&apos;will&apos;};
}

render(){
    setTimeout(()=&gt;{
        this.setState({title:&apos;welcome will&apos;})
    },1000);
     return (
               &lt;Title title={this.state.title} /&gt;
         );

}

//子组件 Title    
render(){
     return (
              &lt;h1&gt;{this.props.title}&lt;/h1&gt;
         );

}    
</code></pre></li>
</ul>
<h1 id="react-事件"><a href="#react-事件" class="headerlink" title="react 事件"></a>react 事件</h1><ol>
<li>Layout中创建事件函数，并将该事件作为属性传给Header</li>
</ol>
<pre><code>import React from &quot;react&quot;;
import Header from &quot;./Header&quot;;
import Footer from &quot;./Footer&quot;;
export default class Layout extends React.Component{
    constructor(){
        super();
        this.state = {title:&apos;alice&apos;};
    } 
    changeTitle(title){
        this.setState({title})
    } 
    render(){
        //setTimeout(()=&gt;this.setState({title:&apos;joe&apos;}),1000)
         return (
                  &lt;div&gt;
                      &lt;Header changeTitle={this.changeTitle.bind(this)} title={this.state.title}/&gt;
                      &lt;Footer/&gt;
                  &lt;/div&gt;
             );

    }
}
</code></pre><p>2.Header 中定义触发函数 并通过this.props.changeTitle来触发事件</p>
<pre><code>import React from &quot;react&quot;;
import Title from &quot;./Header/Title&quot;;
export default class Header extends React.Component{
    handleChange(e){
        const title = e.target.value;
        this.props.changeTitle(title);
    }
    render(){
         return (
                 &lt;div&gt;
                   &lt;Title title={this.props.title} /&gt;
                   &lt;input value={this.props.title} onChange={this.handleChange.bind(this)}/&gt;
                 &lt;/div&gt;
             );

    }
}
</code></pre><h1 id="router和单页应用"><a href="#router和单页应用" class="headerlink" title="router和单页应用"></a>router和单页应用</h1><pre><code>$ npm install -S react-router-dom
$ npm install -S history
</code></pre><h1 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h1><pre><code>const style={marginTop:&quot;10px&quot;}

&lt;div style={style}&gt;&lt;/div&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> Js </category>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> a </tag>
            
            <tag> b </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es6]]></title>
      <url>/2018/01/23/es6/</url>
      <content type="html"><![CDATA[<h1 id="let-const"><a href="#let-const" class="headerlink" title="let , const"></a>let , const</h1><p>let,const :block scope 块级作用域 作用域 {} 内，{}外是无法访问的</p>
<pre><code>if(true){
    let name # &quot;alice&quot;;
}
console.log(name) // nam is not defined
</code></pre><p>name只是作用在{} 内,但是var 对{}而言是直接暴露在外面的,只是在函数内有作用域的概念</p>
<h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><ul>
<li>var 可以在全局中重复声明 这样的结果是会覆盖别人写的变量</li>
<li><p>let 和 const 不能在同一个作用域中重复声明变量</p>
<pre><code>let name # &quot;alice&quot;;
let name # &quot;joe&quot;;
console.log(name); //Identifier &apos;name&apos; has already been declared
</code></pre></li>
</ul>
<pre><code>//不同作用域 虽然变量命一样 但是值不一样 
//以下代码 如果在 console中打印 name的值是 joe,因为是全局的
let name # &quot;joe&quot;;
console.log(name);  //joe
if(true){
   let name # &quot;melody&quot;;
   console.log(name)//melody
}
</code></pre><ul>
<li><p>let 可以重新赋值， 但是const不可以</p>
<pre><code>let name # &quot;alice&quot;;
    name # &quot;sdf&quot;;  //不报错

const age# &quot;AGE&quot;;
     age # &quot;arg&quot;;// 报错 Assignment to constant variable.
</code></pre></li>
<li><p>const 属性可以赋值</p>
<pre><code>const person # {
     name:&apos;alice&apos;,
     age:12
  }

person.age # 13;//可以这样赋值 但是不可以整个person # {}这样赋值, 这样就改变了变量的指针 如果连属性都不让赋值可以这样

const jelley # Object.freeze(person);
</code></pre></li>
</ul>
<h2 id="let-和-const-私有化"><a href="#let-和-const-私有化" class="headerlink" title="let 和 const 私有化"></a>let 和 const 私有化</h2><p>如果直接写全局变量，不管是 var,let,const 都会覆盖 window的全局变量 , 我们可以使用闭包使变量私有化，也可以使用{} 来实现：</p>
<pre><code>(function(){
        let name # &quot;alice&quot;;
        console.log(name)
})();


{
        const name # &quot;joe&quot;;
        console.log(name)// joe
 }
 console.log(name)// &quot;&quot;
</code></pre><p>应用场景：</p>
<pre><code>//应用场景 for循环
for( var i # 0;i&lt;10;i++ ){
    console.log(i);// 0,1,2,.....10
    setTimeout(function(){
        console.log(`i:${i}`)//10
    },1000);
}
console.log(&apos;#########&apos;)

for( let i # 0;i&lt;10;i++ ){
    console.log(i);// 0,1,2,.....10
    setTimeout(function(){
        console.log(`i:${i}`)//0,1,2,.....10
    },1000);
}
</code></pre><h2 id="临时性死区"><a href="#临时性死区" class="headerlink" title="临时性死区"></a>临时性死区</h2><p>var 中的变量提升：</p>
<pre><code>console.log(color);//undefined
     var color # &quot;yellow&quot;;

//这个结果实际是 

var color;
console.log(&apos;color&apos;);
color#&quot;yellow&quot;;
</code></pre><p>let 不是, 在变量未声明之前 变量处于暂时死区的状态</p>
<pre><code>console.log(color);//uncaught ReferenceError: color is not defined
     let color # &quot;yellow&quot;;
</code></pre><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><pre><code>const numbers = [1,2,3,4,5,6];
const  double = numbers.map(function (number) {
    return number*2;
});

const double2 = numbers.map( (number,i) =&gt;{
    return `${i}:${number*2}`;
});
</code></pre><p>也可以这样写 不要return<br>    const double2 = numbers.map( (number,i) =&gt;<br>         <code>${i}:${number*2}</code>;<br>    );</p>
<p>箭头符号 如果只有一个参数 () 可省略，如果有多个参数则必须要写（）</p>
<h2 id="隐式返回"><a href="#隐式返回" class="headerlink" title="隐式返回"></a>隐式返回</h2><pre><code>const double3 # numbers.map( (number,i) #&gt; `${i}:${number*2}`);
</code></pre><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><pre><code>const greet # name #&gt; {alert(`hello ${name}`)};
   greet(&apos;jelley&apos;);
</code></pre><h2 id="箭头函数-this"><a href="#箭头函数-this" class="headerlink" title="箭头函数 this"></a>箭头函数 this</h2><pre><code>const Alice # {
        name:&apos;Alice&apos;,
        hobbies:[&apos;Coding&apos;,&apos;Sleeping&apos;,&apos;Reading&apos;],
        printHobbies:function(){
            this.hobbies.map( hobby#&gt;{
                console.log( `${this.name} loves ${hobby}` );
            });
        }
    };
  Alice.printHobbies();
</code></pre><h2 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h2><pre><code>function multiply(a,b){
         a # a || 5;
         b # b || 3;
         return a*b;
     }

//es6 函数默认值
function multiply(a#2,b#4){
     return a*b;
    }

multiply(undefined,5);
</code></pre><h2 id="不适用的场景"><a href="#不适用的场景" class="headerlink" title="不适用的场景"></a>不适用的场景</h2><pre><code>－ 构造函数
－ 当真正需要用this的时候
</code></pre><h1 id="字符串模版"><a href="#字符串模版" class="headerlink" title="字符串模版"></a>字符串模版</h1><pre><code>const name = &quot;alice&quot;;
const age = 5;
const str = `My name is ${name} My age is ${age*5};`
</code></pre><p>  字符串模版可以用｀｀嵌套, 也可以使用表达式</p>
<pre><code>const jelley = {
     name:&apos;Jelley&apos;,
     date:&apos;2018-01-23&apos;,
     todos:[
         {name:&apos;Go to school&apos;,completed:false},
         {name:&apos;Watch Moving&apos;,completed:true},
         {name:&apos;Running&apos;,completed:true},
     ]
 };
 function renderTodos(todo) {
     return `
     &lt;ul&gt;
         ${jelley.todos.map( todo=&gt; `&lt;li&gt;
             ${todo.name} ${todo.completed ? &quot;✅&quot;: &quot;❎&quot;}
             &lt;/li&gt;` ).join(&quot;&quot;)}
     &lt;/ul&gt;
         `;
 }
 const template = `
     &lt;nav class=&quot;panel&quot;&gt;
       &lt;p class=&quot;panel-heading&quot;&gt;
         ${jelley.name}
       &lt;/p&gt;
       &lt;p class=&quot;panel-blocks&quot;&gt;
          ${renderTodos(jelley)}
       &lt;/p&gt;
     &lt;/nav&gt;
 `;

 document.body.innerHTML = template;
</code></pre><h2 id="模版标签"><a href="#模版标签" class="headerlink" title="模版标签"></a>模版标签</h2><pre><code>const name = &apos;alice&apos;;
const age = 15;
// ... 为剩余参数 等价于 arg2,arg3 ......
function hightLight(strings,...values){
    //注意 如果hightLight是以变量作为开头或结尾的话 strings 就有三个项  头尾为 &quot;&quot;  可对比template 和 template1
   //debugger;//查看console 中的 scope &gt; locale

    //values :[name,age]

    //hilighted 结果是一个数组 [&quot;&lt;span class=&quot;hightlight&quot;&gt;alice&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;hightlight&quot;&gt;15&lt;/span&gt;&quot;]
    const hilighted = values.map(value=&gt;`&lt;span class=&quot;hightlight&quot;&gt;${value}&lt;/span&gt;`);
    let str = &quot;&quot;;
    //strings [&quot;&quot; , &quot;has become to age of&quot; ,&quot;&quot;]


    //字符串累加方法一：
    /*
    strings.forEach(function (string,i) {
        // &quot;&quot; alice
        // has Become to age of 15
        // &quot;&quot; undefined
        str+=`${string}${hilighted[i] || &apos;&apos; }`
    });
    return str;
    */

    //字符串累加方法二： 还可以用arr.reduce方法 不用foreach
   return strings.reduce((prev,curr,i)=&gt;  `${prev}${curr}${hilighted[i]|| &apos;&apos;}`,&apos;&apos;);

}
//这一句其实是 hightLight函数的调用 有三个参数 string name age
const template = hightLight`Jelley ${name} has become to age of ${age}`;
document.body.innerHTML = template;
//const template1 = hightLight`Alice ${name} has become to age of ${age}.`;
</code></pre><h2 id="模板字符串转义"><a href="#模板字符串转义" class="headerlink" title="模板字符串转义"></a>模板字符串转义</h2><p>限制非法字符,防止xss攻击 像在图片中插入 onload 事件等等</p>
<p>cdn:cdnjs.com<br>purify.min.js 使用方法：DOMPurify.sanitize(string);</p>
<pre><code>const form = document.querySelector(&apos;.add-comment&apos;);
const textarea = document.querySelector(&apos;.comment-text&apos;);
const comment = document.querySelector(&apos;.comment&apos;);

function sanitize(strings,...values){
   const dirty = strings.reduce((prev,curr,i) =&gt; `${prev}${curr} ${values[i] || &apos;&apos; } ` , &apos;&apos;);
   return DOMPurify.sanitize(dirty);
}

form.addEventListener(&apos;submit&apos;,function(event){
    event.preventDefault();
    comment.innerHTML =sanitize
        `
        &lt;div class=&quot;header-inner&quot;&gt;Mary&lt;/div&gt;
        &lt;div class=&quot;header-body&quot;&gt;${textarea.value}&lt;/div&gt;
        `;
});
</code></pre><h2 id="模版函数"><a href="#模版函数" class="headerlink" title="模版函数"></a>模版函数</h2><p>note:大小写敏感</p>
<p>string.startWith(string,index) //index string开始的位置<br>string.endWith(string,index) //indes string末位的位置<br>string.includes()<br>string.repeat()</p>
<pre><code>const id = &quot;422126198012042523x&quot;;
 const fan = &quot;I love fx&quot;;

 id.startsWith(&apos;422&apos;);//true
 id.startsWith(&apos;1980&apos;,6)//true 第二个参数为 从第6位开始的是不是1980

 fan.startsWith(&apos;I&apos;);//true
 fan.startsWith(&apos;i&apos;);//false

 fan.endsWith(&apos;love&apos;,6);// 第二个参数index: love 在 fan中最后一位

 &apos;ha&apos;.repeat(5);//hahahahaha
const heading =    `${ &apos;=&apos;.repeat(5) } ${fan} ${ &apos;=&apos;.repeat(5) } `;//&quot;===== I love fx ===== &quot;
</code></pre><h1 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h1><p>使用es6的方法将对象的属性解构出来,就不用每次都 const name = Tom.name这样来获取</p>
<pre><code>const Tom = {
    name:&quot;Tom Jones&quot;,
    age:12,
    family:{
        mother:&quot;Kate Jones&quot;,
        father:&quot;Richard Jones&quot;,
        brother:&quot;Howard Jones&quot;
    }
};
const {name,age} = Tom;
console.log(name);//Tom Jones
console.log(age);//12

//如果想提前声明name 可这样
let name = &quot;&quot;;
({name,age} = Tom);

//变量重命名 和 默认值
const father = &quot;Dad&quot;;
const{ father:f,mother,brother , sister=&apos;no sister as default value&apos; } = Tom.family;// 将变量father 重命名为 f
console.log(f,mother,brother);


//eg
function appendChildDiv(options={}){
    const {width=&apos;100px&apos;,height=&apos;100px&apos;,background=&apos;red&apos;,parent=&apos;body&apos;} = options;
    const div = document.createElement(&apos;div&apos;);
    div.style.width = width;
    div.style.height = height;
    div.style.backgroundColor = background;
    document.querySelector(parent).appendChild(div);
}
appendChildDiv({
    width:&apos;200px&apos;
})
</code></pre><h1 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h1><pre><code>const arr = [&apos;one&apos;,&apos;two&apos;,&apos;three&apos;];
const [one,two,three,category=&apos;php&apos;] = arr; //默认值必须是当变量为undefined的时候才有用

console.log(one,two);

//如果想要 three
const [one,,three] = arr;

//注意 rest参数必须为数组的最后一项
const [one,...others] = arr;
console.log(one, others );//one (2) [&quot;two&quot;, &quot;three&quot;]

//交换变量 
let a=1,b=2;
const [a,b] = [b,a];
</code></pre><h1 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h1><pre><code>const arr = [&apos;apple&apos;,&apos;pear&apos;,&apos;bananer&apos;,&apos;orange&apos;];

    for (let fruit of arr){
        if(fruit == &apos;pear&apos;) continue;
        console.log(fruit);
    }
</code></pre><p>获取索引和值</p>
<pre><code>for (let fruit of arr.entries()) {
    //fruit:[0,&apos;apple&apos;]  [1,&apos;pear&apos;] ...
     //key fruit[0]
     //value fruit[1]
} 
</code></pre><p>解构写法</p>
<pre><code>for (let [index,fruit] of arr.entries()) {
     console.log(`${fruit} ranks ${index+1} in my favoriate fruites`);
}
</code></pre><p>dom操作</p>
<pre><code>&lt;ul&gt;
    &lt;li&gt;Go To School&lt;/li&gt;
    &lt;li&gt;Watch Movie&lt;/li&gt;
    &lt;li&gt;Go Home&lt;/li&gt;
&lt;/ul&gt;

const lists = document.querySelectorAll(&apos;li&apos;)
    for ( let li of lists ) {
        li.addEventListener(&apos;click&apos;,function(){
            console.log(this.classList)
            this.classList.toggle(&apos;completed&apos;)
        })
    }
</code></pre><p>for of 还不支持对象 </p>
<h1 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h1><h2 id="Array-from-Array-of"><a href="#Array-from-Array-of" class="headerlink" title="Array.from()  Array.of()"></a>Array.from()  Array.of()</h2><p>Array.from(kindArr,fn) 将类数组转为数组</p>
<pre><code>const lis = document.querySelectorAll(&apos;li&apos;);

 //将类数组转为数组
 const lisArr = Array.from(lis);

 //eg1:将类数组转为数组并map
  const names = Array.from(lis,todo=&gt;todo.textContent);
  console.log(names);//[&quot;Go to school&quot;, &quot;Watch Movie&quot;, &quot;Go Home&quot;]


  //eg2:
  function sum(){
    //arguments 是个对象 Object
    return Array.from(arguments).reduce( (prev,curr) =&gt; prev+curr,0 )
  }

  console.log( sum(1,2,3) )

  //eg3:也适用于将字符串转为数组
  const fxL = &quot;victorier&quot;;
  console.log( Array.from(fxL) );//[&quot;v&quot;, &quot;i&quot;, &quot;c&quot;, &quot;t&quot;, &quot;o&quot;, &quot;r&quot;, &quot;i&quot;, &quot;e&quot;, &quot;r&quot;]
</code></pre><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p>为解决new Array()参数不一样行为不一样的问题</p>
<pre><code>new Array(7);//[empty × 7]

new Array(2,3);// [2, 3]

Array.of(1);//[1]

Array.of(2,3);//[2,3]
</code></pre><h2 id="find-fn"><a href="#find-fn" class="headerlink" title="find(fn)"></a>find(fn)</h2><p>返回查找的结果对象Object</p>
<pre><code>const inventory = [
    {name:&quot;apple&quot;,qty:0},
    {name:&quot;pear&quot;,qty:5},
    {name:&quot;bananer&quot;,qty:10}
]
const apple = inventory.find( fruit =&gt;{
    return fruit.name == &apos;apple&apos;;
});
console.log(apple);//{name:&apos;apple&apos;,qty:10}
</code></pre><h2 id="findIndex-fn"><a href="#findIndex-fn" class="headerlink" title="findIndex(fn)"></a>findIndex(fn)</h2><p>返回索引 用法同上<br>    const bananerIndex = inventory.findIndex( fruit =&gt; fruit.name == ‘bananer’ )</p>
<h2 id="some-fn"><a href="#some-fn" class="headerlink" title="some(fn)"></a>some(fn)</h2><p>如果满足fn的条件则返回为true,并跳出<br>    const isEnough = inventory.some( fruit =&gt; fruit.qty &gt; 0 );</p>
<h2 id="every-fn"><a href="#every-fn" class="headerlink" title="every(fn)"></a>every(fn)</h2><p>如果每条都满足则返回true<br>    const isAllEnough = inventory.every( fruit =&gt; fruit.qty &gt; 0 );</p>
<h1 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h1><p>对函数参数处理</p>
<pre><code>//获取函数的所有参数并存放在一个叫numbers的变量中 数组类型
function sum(...numbers){
    return numbers.reduce((prev,curr)=&gt;prev+curr,0)
}
sum(1,2,3);//6

//将部分参数放数组里
function convertCurrency(rate,...amounts){
    console.log(rate,amount);
    return amounts.map(amount =&gt; amount*rate);
}
convertCurrency(0.0012,23,34,45);//0.0012 [23, 34, 45]

//用于变量的解构
const player = [&apos;polyna&apos;,&apos;#2343453&apos;,5.3,3.4,3.4,2.3];
const [name,id,...score] = player;
console.log(score);//[5.3, 3.4, 3.4, 2.3]
</code></pre><h1 id="扩展运算符-…"><a href="#扩展运算符-…" class="headerlink" title="扩展运算符 …"></a>扩展运算符 …</h1><p>与剩余参数相反, 把可遍历对象的每个元素扩展为一个参数序列</p>
<p>字符串(可遍历对象)    </p>
<pre><code>[...&apos;fx&apos;] //[&quot;f&quot;, &quot;x&quot;]
</code></pre><p>数组(对于数组合并之类的很好用)</p>
<pre><code>const yongers = [&apos;alice&apos;,&apos;polyna&apos;,&apos;joe&apos;];
const olders = [&apos;frank&apos;,&apos;marry&apos;,&apos;kate&apos;];
const members = [...yongers,...olders,&apos;dan&apos;];
//[&quot;alice&quot;, &quot;polyna&quot;, &quot;joe&quot;, &quot;frank&quot;, &quot;marry&quot;, &quot;kate&quot;, &quot;dan&quot;]
</code></pre><p>变量的赋值 对象的引用的处理,原来我们可以这样做：</p>
<pre><code>const newMembers = [].concat(members); //这样改变 newMembers[0] = &apos;suri&apos; 就不会影响members

//现在我们可以这样做：

const newMembers = [...members];       
</code></pre><p>函数参数</p>
<pre><code>const fx = [&apos;vic&apos;,&apos;suri&apos;,&apos;krystal&apos;];
const fxLater = [&apos;ember&apos;,&apos;luna&apos;];
fx.push(...fxLater);  //[&apos;vic&apos;,&apos;suri&apos;,&apos;krystal&apos;,&apos;ember&apos;,&apos;luna&apos;]

//eg date
const dateFields = [2018,1,24];
const date = new Date(...dateFields);//将数组扩展为函数的参数
</code></pre>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> Js </category>
            
            <category> es6 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2018/01/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> Js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> a </tag>
            
            <tag> b </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
